---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.global.name }}
  namespace: {{ .Values.global.namespace }}
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-access-log-enabled: "false"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-enabled: "false"
    service.beta.kubernetes.io/aws-load-balancer-type: "external"
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "ip"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
spec:
  ports:
  - protocol: TCP
    name: {{ .Values.jupyter.name }}
    port: {{ .Values.jupyter.port }} 
    targetPort:  {{ .Values.jupyter.target_port }}
  - protocol: TCP
    name: {{ .Values.tensorboard.name }}
    port: {{ .Values.tensorboard.port }} 
    targetPort:  {{ .Values.tensorboard.target_port }}
  selector:
    app: {{ .Values.jupyter.name }}
  type: LoadBalancer
  loadBalancerSourceRanges:
  - {{ required ".Values.global.source_cidr required!" .Values.global.source_cidr }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.global.name }}-nginx-conf
  namespace: {{ .Values.global.namespace }}
data:
  nginx.conf: |
    user www-data;
    worker_processes auto;
    daemon off;
    pid /run/nginx.pid;

    events {
        worker_connections 768;
        # multi_accept on;
    }
    
    http {
      access_log	/var/log/nginx/access.log;

      server {
        listen {{ .Values.tensorboard.target_port }} default_server ssl;
        listen [::]:{{ .Values.tensorboard.target_port }} default_server ipv6only=on ssl;

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_ecdh_curve secp384r1;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;
        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        ssl_certificate {{ .Values.nginx.ssl_certificate }};
        ssl_certificate_key {{ .Values.nginx.ssl_certificate_key }};

        location / {
          allow   {{ required ".Values.global.source_cidr required!" .Values.global.source_cidr }};
          deny    all;
          auth_basic "Restricted Remote";
          auth_basic_user_file /etc/nginx/.htpasswd;
          proxy_http_version 1.1;
          proxy_set_header Host $http_host_with_default;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_pass http://127.0.0.1:{{ .Values.tensorboard.upstream_port }};
        }
      }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.global.name }}-nginx-htpasswd
  namespace: {{ .Values.global.namespace }}
data:
  .htpasswd: |
    {{ .Values.nginx.user }}:{{ required " .Values.nginx.htpasswd required!" .Values.nginx.htpasswd }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.global.name }}
  namespace: {{ .Values.global.namespace }}
  labels:
    app: {{ .Values.jupyter.name }}
spec:
  replicas: 1
  selector:
    matchLabels:
     app: {{ .Values.jupyter.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.jupyter.name }}
      annotations:
        karpenter.sh/do-not-disrupt: "true"
    spec:
      volumes:
      - name: {{ .Values.global.shared_fs }} 
        persistentVolumeClaim:
            claimName: {{ .Values.global.shared_pvc }}
      - name: nginx-conf
        configMap:
          name: {{ .Values.global.name }}-nginx-conf
          items:
          - key: nginx.conf
            path: nginx.conf
      - name: nginx-htpasswd
        configMap:
          name: {{ .Values.global.name }}-nginx-htpasswd
          items:
          - key: .htpasswd
            path: .htpasswd
      - name: log
        emptyDir: {}
      tolerations:
      - key: "nvidia.com/gpu"
        operator: "Exists"
        effect: "NoSchedule"
      nodeSelector:
        node.kubernetes.io/instance-type: {{ .Values.jupyter.gpu_instance_type }}
      containers:
      - name:  {{ .Values.jupyter.name }}
        env:
        - name: LOGDIR
          value: /{{ .Values.global.shared_fs }}/{{ .Values.global.log_dir }}
        command:
        - jupyter
        args:
        - notebook 
        - --allow-root
        - --no-browser 
        - --ip=0.0.0.0 
        - --port={{ .Values.jupyter.target_port }} 
        - --certfile={{ .Values.nginx.ssl_certificate }}
        - --keyfile={{ .Values.nginx.ssl_certificate_key }}
        - "--ServerApp.ssl_options={'ssl_version': 5}" 
        - --notebook-dir=/notebooks
        image: {{ .Values.image }} 
        imagePullPolicy: {{ .Values.image_pull_policy }}
        ports:
        - containerPort:  {{ .Values.jupyter.target_port }}
          name: {{ .Values.jupyter.name }} 
        volumeMounts:
        - mountPath: /{{ .Values.global.shared_fs }}
          name: {{ .Values.global.shared_fs }}
        resources:
          requests:
            nvidia.com/gpu: 1
            cpu: 1
          limits:
            nvidia.com/gpu: 1
            cpu: 4
      - name:  {{ .Values.tensorboard.name }}
        command:
        - tensorboard
        args:
        - --logdir=/{{ .Values.global.shared_fs }}/{{ .Values.global.log_dir }}/train_log/maskrcnn
        - --port={{ .Values.tensorboard.upstream_port }}
        image: {{ .Values.image }}
        imagePullPolicy: {{ .Values.image_pull_policy }}
        ports:
        - containerPort:  {{ .Values.tensorboard.upstream_port }}
        volumeMounts:
        - mountPath: /{{ .Values.global.shared_fs }}
          name: {{ .Values.global.shared_fs }}
      - name: {{ .Values.nginx.name }}
        command:
        - nginx
        image: {{ .Values.image }}
        imagePullPolicy: {{ .Values.image_pull_policy }}
        ports:
        - containerPort: {{ .Values.tensorboard.target_port }}
          name:  {{ .Values.tensorboard.name }}
        volumeMounts:
        - mountPath: /etc/nginx/.htpasswd
          subPath: .htpasswd
          readOnly: true
          name: nginx-htpasswd
        - mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
          name: nginx-conf
        - mountPath: /var/log/nginx
          name: log
